# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: templates.gatekeeper.sh/v1alpha1
kind: ConstraintTemplate
metadata:
  name: gcp-iam-deny-sod-v1
spec:
  crd:
    spec:
      names:
        kind: GCPIAMDenySodConstraintV1
        plural: gcpiamdenysodconstraintsv1
      validation:
        openAPIV3Schema:
          properties:
            sod_roles:
              description: "Comma separated pairs of roles that no one should have both at the same time
                ex. roles/compute.networkAdmin,roles/compute.securityAdmin"
              type: array
              items: string
  targets:
   validation.gcp.forsetisecurity.org:
      rego: | #INLINE("validator/iam_deny_sod.rego")
            #
            # Copyright 2019 Google LLC
            #
            # Licensed under the Apache License, Version 2.0 (the "License");
            # you may not use this file except in compliance with the License.
            # You may obtain a copy of the License at
            #
            #      http://www.apache.org/licenses/LICENSE-2.0
            #
            # Unless required by applicable law or agreed to in writing, software
            # distributed under the License is distributed on an "AS IS" BASIS,
            # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            # See the License for the specific language governing permissions and
            # limitations under the License.
            #
            
            package templates.gcp.GCPIAMDenySodConstraintV1
            
            import data.validator.gcp.lib as lib
            
            deny[{
            	"msg": message,
            	"details": metadata,
            }] {
            	asset_types := {
            		"cloudresourcemanager.googleapis.com/Organization",
            		"cloudresourcemanager.googleapis.com/Folder",
            		"cloudresourcemanager.googleapis.com/Project",
            	}
            
            	input.asset.asset_type == asset_types[_]
            
            	constraint := input.constraint
            	params := lib.get_constraint_params(constraint)
            	role_pairs := params.sod_roles
            	asset := input.asset
            
            	# asset := input
            	# role_pairs := ["roles/iam.serviceAccountUse,roles/iam.securityAdmin"] #params.sod_roles
            
            	bindings := asset.iam_policy.bindings
            
            	violations := {role_pair: sod_members |
            		some i
            		role_pair := role_pairs[i]
            		sod_members := get_sod_members(role_pair, bindings)
            	}
            
            	# make sure that we have violations to return
            	count(violations) > 0
            
            	message := sprintf("IAM policy violations for %v due to segregation of duty roles %v", [asset.name, violations])
            
            	metadata := {
            		"resource": asset.name,
            		"violations": violations,
            	}
            }
            
            ###########################
            # Rule Utilities
            ###########################
            
            get_sod_members(role_pair, bindings) = sod_members {
            	role_set := split(role_pair, ",")
            	some i, j
            	bindings[i].role == role_set[0]
            	bindings[j].role == role_set[1]
            	sod_members := cast_set(bindings[i].members) & cast_set(bindings[j].members)
            	count(sod_members) > 0
            }
            #ENDINLINE
